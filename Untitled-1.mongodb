
// Select the database to use.
use('test');

// The drop() command destroys all data from a collection.
// Make sure you run it against the correct database and collection.
db.sales.drop();


db.sales.insertMany([
    {
        '_id': 1,
        'item': 'abc',
        'price': 100,
        'quantity': 20,
        'date': new Date('2021-06-01T08:00:00Z')
    },
    {
        '_id': 2,
        'item': 'jkl',
        'price': 200,
        'quantity': 177,
        'date': new Date('2014-03-01T09:00:00Z')
    },
    {
        '_id': 3,
        'item': 'xyz',
        'price': 500,
        'quantity': 100,
        'date': new Date('2014-03-15T09:00:00Z')
    },
    {
        '_id': 4,
        'item': 'xyz',
        'price': 5,
        'quantity': 20,
        'date': new Date('2014-04-04T11:21:39.736Z')
    },
    {
        '_id': 5,
        'item': 'abc',
        'price': 10,
        'quantity': 10,
        'date': new Date('2014-04-04T21:23:13.331Z')
    },
    {
        '_id': 6,
        'item': 'def',
        'price': 7.5,
        'quantity': 5,
        'date': new Date('2015-06-04T05:08:13Z')
    },
    {
        '_id': 7,
        'item': 'def',
        'price': 7.5,
        'quantity': 10,
        'date': new Date('2015-09-10T08:43:00Z')
    },
    {
        '_id': 8,
        'item': 'abc',
        'price': 10,
        'quantity': 5,
        'date': new Date('2016-02-06T20:20:13Z')
    }
]);

// Run a find command to view items sold on Entered Date
// db.sales.find(
//   { 
//     date: { 
//       $gte: new Date('2021-04-04'), 
//       $lt: new Date('2021-07-05')
//     }
//   }
// );

// Build an aggregation to view total sales for each product in 2014.
const singleItemRevAggregation = [
  {
     $match: { 
        date: { 
           $gte: new Date('2021-01-01'),
           $lt: new Date('2022-01-01')
        } 
     }
  },
  { 
    $group: { 
        _id: '$item',
        totalSaleAmount: {
           $sum: { 
             $multiply: [ '$price', '$quantity' ]
           } 
        } 
    }
  }
];

// Use toArray() to exhaust the cursor to return the whole result set.
// You can use hasNext()/next() to iterate through the cursor page by page.
db.sales.aggregate(singleItemRevAggregation);





// Build an aggregation to view total sales for each product in 2014.
const AllItemRevAggregation = [
  {
     $match: { 
        date: { 
           $gte: new Date('2010-01-01'),
           $lt: new Date('2022-01-01')
        } 
     }
  },
  {
     $addFields: {
        totalSaleOfItem: {
           $sum: { 
             $multiply: [ '$price', '$quantity' ]
           } 
         }
       }
  },

];


db.sales.aggregate(AllItemRevAggregation)



db.sales.find(
  { 
    $expr : 
      { 
        $gt : [
          {
            $cond : {
              if : {
                $gte : ["$volume", 190]
              }, 
              then : {
                $subtract : ["$volume", 30]
              }, 
              else : "$volume" 
            }
          }, 
          "$target"
        ]
      }
    }
)db.students.find({hobbies.title : { : BIO,  : i}}).pretty()
db.students.find({hobbies.title : biology}).pretty()
